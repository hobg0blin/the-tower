(()=>{"use strict";var e,r,n,t,o,i,d,a,c={},l={};function s(e){var r=l[e];if(void 0!==r){if(void 0!==r.error)throw r.error;return r.exports}var n=l[e]={id:e,loaded:!1,exports:{}};try{var t={id:e,module:n,factory:c[e],require:s};s.i.forEach((function(e){e(t)})),n=t.module,t.factory.call(n.exports,n,n.exports,t.require)}catch(e){throw n.error=e,e}return n.loaded=!0,n.exports}s.m=c,s.c=l,s.i=[],e=[],s.O=(r,n,t,o)=>{if(!n){var i=1/0;for(c=0;c<e.length;c++){for(var[n,t,o]=e[c],d=!0,a=0;a<n.length;a++)(!1&o||i>=o)&&Object.keys(s.O).every((e=>s.O[e](n[a])))?n.splice(a--,1):(d=!1,o<i&&(i=o));d&&(e.splice(c--,1),r=t())}return r}o=o||0;for(var c=e.length;c>0&&e[c-1][2]>o;c--)e[c]=e[c-1];e[c]=[n,t,o]},s.n=e=>{var r=e&&e.__esModule?()=>e.default:()=>e;return s.d(r,{a:r}),r},s.d=(e,r)=>{for(var n in r)s.o(r,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},s.hu=e=>e+"."+s.h()+".hot-update.js",s.miniCssF=e=>{},s.hmrF=()=>"runtime."+s.h()+".hot-update.json",s.h=()=>"a6b343cbeb8ec1153b2b",s.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r={},n="threejs-es6-webpack-boilerplate:",s.l=(e,t,o,i)=>{if(r[e])r[e].push(t);else{var d,a;if(void 0!==o)for(var c=document.getElementsByTagName("script"),l=0;l<c.length;l++){var u=c[l];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==n+o){d=u;break}}d||(a=!0,(d=document.createElement("script")).charset="utf-8",d.timeout=120,s.nc&&d.setAttribute("nonce",s.nc),d.setAttribute("data-webpack",n+o),d.src=e),r[e]=[t];var p=(n,t)=>{d.onerror=d.onload=null,clearTimeout(f);var o=r[e];if(delete r[e],d.parentNode&&d.parentNode.removeChild(d),o&&o.forEach((e=>e(t))),n)return n(t)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:d}),12e4);d.onerror=p.bind(null,d.onerror),d.onload=p.bind(null,d.onload),a&&document.head.appendChild(d)}},s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e,r,n,t,o={},i=s.c,d=[],a=[],c="idle";function l(e){c=e;for(var r=0;r<a.length;r++)a[r].call(null,e)}function u(e){if(0===r.length)return e();var n=r;return r=[],Promise.all(n).then((function(){return u(e)}))}function p(e){if("idle"!==c)throw new Error("check() is only allowed in idle status");return l("check"),s.hmrM().then((function(t){if(!t)return l(v()?"ready":"idle"),null;l("prepare");var o=[];return r=[],n=[],Promise.all(Object.keys(s.hmrC).reduce((function(e,r){return s.hmrC[r](t.c,t.r,t.m,e,n,o),e}),[])).then((function(){return u((function(){return e?h(e):(l("ready"),o)}))}))}))}function f(e){return"ready"!==c?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):h(e)}function h(e){e=e||{},v();var r=n.map((function(r){return r(e)}));n=void 0;var o,i=r.map((function(e){return e.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),r.forEach((function(e){e.dispose&&e.dispose()})),l("apply");var d=function(e){o||(o=e)},a=[];return r.forEach((function(e){if(e.apply){var r=e.apply(d);if(r)for(var n=0;n<r.length;n++)a.push(r[n])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):t?h(e).then((function(e){return a.forEach((function(r){e.indexOf(r)<0&&e.push(r)})),e})):(l("idle"),Promise.resolve(a))}function v(){if(t)return n||(n=[]),Object.keys(s.hmrI).forEach((function(e){t.forEach((function(r){s.hmrI[e](r,n)}))})),t=void 0,!0}s.hmrD=o,s.i.push((function(h){var v,m,y,g=h.module,b=function(n,t){var o=i[t];if(!o)return n;var a=function(r){if(o.hot.active){if(i[r]){var a=i[r].parents;-1===a.indexOf(t)&&a.push(t)}else d=[t],e=r;-1===o.children.indexOf(r)&&o.children.push(r)}else console.warn("[HMR] unexpected require("+r+") from disposed module "+t),d=[];return n(r)},s=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var p in n)Object.prototype.hasOwnProperty.call(n,p)&&"e"!==p&&Object.defineProperty(a,p,s(p));return a.e=function(e){return function(e){switch(c){case"ready":return l("prepare"),r.push(e),u((function(){l("ready")})),e;case"prepare":return r.push(e),e;default:return e}}(n.e(e))},a}(h.require,h.id);g.hot=(v=h.id,m=g,y={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==v,_requireSelf:function(){d=m.parents.slice(),e=v,s(v)},active:!0,accept:function(e,r,n){if(void 0===e)y._selfAccepted=!0;else if("function"==typeof e)y._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)y._acceptedDependencies[e[t]]=r||function(){},y._acceptedErrorHandlers[e[t]]=n;else y._acceptedDependencies[e]=r||function(){},y._acceptedErrorHandlers[e]=n},decline:function(e){if(void 0===e)y._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var r=0;r<e.length;r++)y._declinedDependencies[e[r]]=!0;else y._declinedDependencies[e]=!0},dispose:function(e){y._disposeHandlers.push(e)},addDisposeHandler:function(e){y._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=y._disposeHandlers.indexOf(e);r>=0&&y._disposeHandlers.splice(r,1)},invalidate:function(){switch(this._selfInvalidated=!0,c){case"idle":n=[],Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,n)})),l("ready");break;case"ready":Object.keys(s.hmrI).forEach((function(e){s.hmrI[e](v,n)}));break;case"prepare":case"check":case"dispose":case"apply":(t=t||[]).push(v)}},check:p,apply:f,status:function(e){if(!e)return c;a.push(e)},addStatusHandler:function(e){a.push(e)},removeStatusHandler:function(e){var r=a.indexOf(e);r>=0&&a.splice(r,1)},data:o[v]},e=void 0,y),g.parents=d,g.children=[],d=[],h.require=b})),s.hmrC={},s.hmrI={}})(),s.p="/js/",t=(e,r,n,t)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)n();else{var d=i&&("load"===i.type?"missing":i.type),a=i&&i.target&&i.target.href||r,c=new Error("Loading CSS chunk "+e+" failed.\n("+a+")");c.code="CSS_CHUNK_LOAD_FAILED",c.type=d,c.request=a,o.parentNode.removeChild(o),t(c)}},o.href=r,document.head.appendChild(o),o},o=(e,r)=>{for(var n=document.getElementsByTagName("link"),t=0;t<n.length;t++){var o=(d=n[t]).getAttribute("data-href")||d.getAttribute("href");if("stylesheet"===d.rel&&(o===e||o===r))return d}var i=document.getElementsByTagName("style");for(t=0;t<i.length;t++){var d;if((o=(d=i[t]).getAttribute("data-href"))===e||o===r)return d}},i=[],d=[],a=e=>({dispose:()=>{for(var e=0;e<i.length;e++){var r=i[e];r.parentNode&&r.parentNode.removeChild(r)}i.length=0},apply:()=>{for(var e=0;e<d.length;e++)d[e].rel="stylesheet";d.length=0}}),s.hmrC.miniCss=(e,r,n,c,l,u)=>{l.push(a),e.forEach((e=>{var r=s.miniCssF(e),n=s.p+r;const a=o(r,n);a&&c.push(new Promise(((r,o)=>{var c=t(e,n,(()=>{c.as="style",c.rel="preload",r()}),o);i.push(a),d.push(c)})))}))},(()=>{var e,r,n,t,o={runtime:0},i={};function d(e){return new Promise(((r,n)=>{i[e]=r;var t=s.p+s.hu(e),o=new Error;s.l(t,(r=>{if(i[e]){i[e]=void 0;var t=r&&("load"===r.type?"missing":r.type),d=r&&r.target&&r.target.src;o.message="Loading hot update chunk "+e+" failed.\n("+t+": "+d+")",o.name="ChunkLoadError",o.type=t,o.request=d,n(o)}}))}))}function a(i){function d(e){for(var r=[e],n={},t=r.map((function(e){return{chain:[e],id:e}}));t.length>0;){var o=t.pop(),i=o.id,d=o.chain,c=s.c[i];if(c&&(!c.hot._selfAccepted||c.hot._selfInvalidated)){if(c.hot._selfDeclined)return{type:"self-declined",chain:d,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:d,moduleId:i};for(var l=0;l<c.parents.length;l++){var u=c.parents[l],p=s.c[u];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:d.concat([u]),moduleId:i,parentId:u};-1===r.indexOf(u)&&(p.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),a(n[u],[i])):(delete n[u],r.push(u),t.push({chain:d.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:r,outdatedDependencies:n}}function a(e,r){for(var n=0;n<r.length;n++){var t=r[n];-1===e.indexOf(t)&&e.push(t)}}s.f&&delete s.f.jsonpHmr,e=void 0;var c={},l=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(s.o(r,f)){var h,v=r[f],m=!1,y=!1,g=!1,b="";switch((h=v?d(f):{type:"disposed",moduleId:f}).chain&&(b="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+b));break;case"declined":i.onDeclined&&i.onDeclined(h),i.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+b));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(h),i.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+b));break;case"accepted":i.onAccepted&&i.onAccepted(h),y=!0;break;case"disposed":i.onDisposed&&i.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(y)for(f in u[f]=v,a(l,h.outdatedModules),h.outdatedDependencies)s.o(h.outdatedDependencies,f)&&(c[f]||(c[f]=[]),a(c[f],h.outdatedDependencies[f]));g&&(a(l,[h.moduleId]),u[f]=p)}r=void 0;for(var _,E=[],w=0;w<l.length;w++){var k=l[w],I=s.c[k];I&&I.hot._selfAccepted&&u[k]!==p&&!I.hot._selfInvalidated&&E.push({module:k,require:I.hot._requireSelf,errorHandler:I.hot._selfAccepted})}return{dispose:function(){var e;n.forEach((function(e){delete o[e]})),n=void 0;for(var r,t=l.slice();t.length>0;){var i=t.pop(),d=s.c[i];if(d){var a={},u=d.hot._disposeHandlers;for(w=0;w<u.length;w++)u[w].call(null,a);for(s.hmrD[i]=a,d.hot.active=!1,delete s.c[i],delete c[i],w=0;w<d.children.length;w++){var p=s.c[d.children[w]];p&&((e=p.parents.indexOf(i))>=0&&p.parents.splice(e,1))}}}for(var f in c)if(s.o(c,f)&&(d=s.c[f]))for(_=c[f],w=0;w<_.length;w++)r=_[w],(e=d.children.indexOf(r))>=0&&d.children.splice(e,1)},apply:function(e){for(var r in u)s.o(u,r)&&(s.m[r]=u[r]);for(var n=0;n<t.length;n++)t[n](s);for(var o in c)if(s.o(c,o)){var d=s.c[o];if(d){_=c[o];for(var a=[],p=[],f=[],h=0;h<_.length;h++){var v=_[h],m=d.hot._acceptedDependencies[v],y=d.hot._acceptedErrorHandlers[v];if(m){if(-1!==a.indexOf(m))continue;a.push(m),p.push(y),f.push(v)}}for(var g=0;g<a.length;g++)try{a[g].call(null,_)}catch(r){if("function"==typeof p[g])try{p[g](r,{moduleId:o,dependencyId:f[g]})}catch(n){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:f[g],error:n,originalError:r}),i.ignoreErrored||(e(n),e(r))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:f[g],error:r}),i.ignoreErrored||e(r)}}}for(var b=0;b<E.length;b++){var w=E[b],k=w.module;try{w.require(k)}catch(r){if("function"==typeof w.errorHandler)try{w.errorHandler(r,{moduleId:k,module:s.c[k]})}catch(n){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:k,error:n,originalError:r}),i.ignoreErrored||(e(n),e(r))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:k,error:r}),i.ignoreErrored||e(r)}}return l}}}self.webpackHotUpdatethreejs_es6_webpack_boilerplate=(e,n,o)=>{for(var d in n)s.o(n,d)&&(r[d]=n[d]);o&&t.push(o),i[e]&&(i[e](),i[e]=void 0)},s.hmrI.jsonp=function(e,o){r||(r={},t=[],n=[],o.push(a)),s.o(r,e)||(r[e]=s.m[e])},s.hmrC.jsonp=function(i,c,l,u,p,f){p.push(a),e={},n=c,r=l.reduce((function(e,r){return e[r]=!1,e}),{}),t=[],i.forEach((function(r){s.o(o,r)&&void 0!==o[r]&&(u.push(d(r)),e[r]=!0)})),s.f&&(s.f.jsonpHmr=function(r,n){e&&!s.o(e,r)&&s.o(o,r)&&void 0!==o[r]&&(n.push(d(r)),e[r]=!0)})},s.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(s.p+s.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))},s.O.j=e=>0===o[e];var c=(e,r)=>{var n,t,[i,d,a]=r,c=0;for(n in d)s.o(d,n)&&(s.m[n]=d[n]);for(a&&a(s),e&&e(r);c<i.length;c++)t=i[c],s.o(o,t)&&o[t]&&o[t][0](),o[i[c]]=0;s.O()},l=self.webpackChunkthreejs_es6_webpack_boilerplate=self.webpackChunkthreejs_es6_webpack_boilerplate||[];l.forEach(c.bind(null,0)),l.push=c.bind(null,l.push.bind(l))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,